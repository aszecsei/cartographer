{"version":3,"sources":["math/vec2.ts","../node_modules/delaunator/index.js","../node_modules/d3-delaunay/src/path.js","../node_modules/d3-delaunay/src/polygon.js","../node_modules/d3-delaunay/src/voronoi.js","../node_modules/d3-delaunay/src/delaunay.js","../node_modules/d3-delaunay/src/index.js","main.ts"],"names":["EPSILON","Math","pow","EDGE_STACK","Uint32Array","Delaunator","from","points","getX","defaultGetX","getY","defaultGetY","n","length","coords","Float64Array","i","p","constructor","Error","maxTriangles","max","_triangles","_halfedges","Int32Array","_hashSize","ceil","sqrt","_hullPrev","_hullNext","_hullTri","_hullHash","fill","_ids","_dists","update","hullPrev","hullNext","hullTri","hullHash","minX","Infinity","minY","maxX","maxY","x","y","cx","cy","minDist","i0","i1","i2","d","dist","i0x","i0y","i1x","i1y","minRadius","r","circumradius","i2x","i2y","quicksort","hull","j","d0","id","subarray","triangles","halfedges","orient","center","circumcenter","_cx","_cy","_hullStart","hullSize","_hashKey","trianglesLen","_addTriangle","xp","yp","k","abs","start","key","e","q","t","_legalize","floor","pseudoAngle","a","ar","b","a0","b0","al","bl","p0","pr","pl","p1","illegal","inCircle","hbl","_link","br","c","dx","dy","ax","ay","bx","by","px","py","qx","qy","rx","ry","ex","ey","fx","fy","bp","cp","cl","ids","dists","left","right","temp","tempDist","swap","arr","tmp","epsilon","Path","_x0","_y0","_x1","_y1","_","moveTo","closePath","lineTo","arc","x0","y0","rect","w","h","value","Polygon","push","slice","Voronoi","delaunay","xmin","ymin","xmax","ymax","_circumcenters","vectors","_init","circumcenters","t1","t2","t3","x1","y1","x2","y2","x3","y3","a2","a3","b2","b3","d1","d2","d3","ab","render","context","buffer","undefined","inedges","ti","tj","xi","yi","xj","yj","_renderSegment","h0","h1","v","_project","renderBounds","renderCell","_clip","cellPolygons","cell","cellPolygon","polygon","S","c0","_regioncode","c1","_clipSegment","contains","_step","_cell","e0","V","_clipInfinite","_clipFinite","P","e1","sx0","sy0","sx1","sy1","_edgecode","_edge","vx0","vy0","vxn","vyn","Array","unshift","splice","vx","vy","tau","PI","pointX","pointY","area","jitter","sin","cos","Delaunay","_delaunator","_hullIndex","collinear","sort","f","bounds","hullIndex","voronoi","neighbors","l","indexOf","find","dc","dt","renderHull","renderPoints","hullPolygon","renderTriangle","t0","trianglePolygons","trianglePolygon","flatArray","that","array","call","flatIterable"],"mappings":"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","file":"main.bed6c3dc.js","sourceRoot":"..\\src","sourcesContent":["export class Vec2 {\r\n  x: number;\r\n  y: number;\r\n\r\n  constructor(x: number, y: number) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n}\r\n","\nconst EPSILON = Math.pow(2, -52);\nconst EDGE_STACK = new Uint32Array(512);\n\nexport default class Delaunator {\n\n    static from(points, getX = defaultGetX, getY = defaultGetY) {\n        const n = points.length;\n        const coords = new Float64Array(n * 2);\n\n        for (let i = 0; i < n; i++) {\n            const p = points[i];\n            coords[2 * i] = getX(p);\n            coords[2 * i + 1] = getY(p);\n        }\n\n        return new Delaunator(coords);\n    }\n\n    constructor(coords) {\n        const n = coords.length >> 1;\n        if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');\n\n        this.coords = coords;\n\n        // arrays that will store the triangulation graph\n        const maxTriangles = Math.max(2 * n - 5, 0);\n        this._triangles = new Uint32Array(maxTriangles * 3);\n        this._halfedges = new Int32Array(maxTriangles * 3);\n\n        // temporary arrays for tracking the edges of the advancing convex hull\n        this._hashSize = Math.ceil(Math.sqrt(n));\n        this._hullPrev = new Uint32Array(n); // edge to prev edge\n        this._hullNext = new Uint32Array(n); // edge to next edge\n        this._hullTri = new Uint32Array(n); // edge to adjacent triangle\n        this._hullHash = new Int32Array(this._hashSize).fill(-1); // angular edge hash\n\n        // temporary arrays for sorting points\n        this._ids = new Uint32Array(n);\n        this._dists = new Float64Array(n);\n\n        this.update();\n    }\n\n    update() {\n        const {coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash} =  this;\n        const n = coords.length >> 1;\n\n        // populate an array of point indices; calculate input data bbox\n        let minX = Infinity;\n        let minY = Infinity;\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n\n        for (let i = 0; i < n; i++) {\n            const x = coords[2 * i];\n            const y = coords[2 * i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n            this._ids[i] = i;\n        }\n        const cx = (minX + maxX) / 2;\n        const cy = (minY + maxY) / 2;\n\n        let minDist = Infinity;\n        let i0, i1, i2;\n\n        // pick a seed point close to the center\n        for (let i = 0; i < n; i++) {\n            const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);\n            if (d < minDist) {\n                i0 = i;\n                minDist = d;\n            }\n        }\n        const i0x = coords[2 * i0];\n        const i0y = coords[2 * i0 + 1];\n\n        minDist = Infinity;\n\n        // find the point closest to the seed\n        for (let i = 0; i < n; i++) {\n            if (i === i0) continue;\n            const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);\n            if (d < minDist && d > 0) {\n                i1 = i;\n                minDist = d;\n            }\n        }\n        let i1x = coords[2 * i1];\n        let i1y = coords[2 * i1 + 1];\n\n        let minRadius = Infinity;\n\n        // find the third point which forms the smallest circumcircle with the first two\n        for (let i = 0; i < n; i++) {\n            if (i === i0 || i === i1) continue;\n            const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);\n            if (r < minRadius) {\n                i2 = i;\n                minRadius = r;\n            }\n        }\n        let i2x = coords[2 * i2];\n        let i2y = coords[2 * i2 + 1];\n\n        if (minRadius === Infinity) {\n            // order collinear points by dx (or dy if all x are identical)\n            // and return the list as a hull\n            for (let i = 0; i < n; i++) {\n                this._dists[i] = (coords[2 * i] - coords[0]) || (coords[2 * i + 1] - coords[1]);\n            }\n            quicksort(this._ids, this._dists, 0, n - 1);\n            const hull = new Uint32Array(n);\n            let j = 0;\n            for (let i = 0, d0 = -Infinity; i < n; i++) {\n                const id = this._ids[i];\n                if (this._dists[id] > d0) {\n                    hull[j++] = id;\n                    d0 = this._dists[id];\n                }\n            }\n            this.hull = hull.subarray(0, j);\n            this.triangles = new Uint32Array(0);\n            this.halfedges = new Uint32Array(0);\n            return;\n        }\n\n        // swap the order of the seed points for counter-clockwise orientation\n        if (orient(i0x, i0y, i1x, i1y, i2x, i2y)) {\n            const i = i1;\n            const x = i1x;\n            const y = i1y;\n            i1 = i2;\n            i1x = i2x;\n            i1y = i2y;\n            i2 = i;\n            i2x = x;\n            i2y = y;\n        }\n\n        const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);\n        this._cx = center.x;\n        this._cy = center.y;\n\n        for (let i = 0; i < n; i++) {\n            this._dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);\n        }\n\n        // sort the points by distance from the seed triangle circumcenter\n        quicksort(this._ids, this._dists, 0, n - 1);\n\n        // set up the seed triangle as the starting hull\n        this._hullStart = i0;\n        let hullSize = 3;\n\n        hullNext[i0] = hullPrev[i2] = i1;\n        hullNext[i1] = hullPrev[i0] = i2;\n        hullNext[i2] = hullPrev[i1] = i0;\n\n        hullTri[i0] = 0;\n        hullTri[i1] = 1;\n        hullTri[i2] = 2;\n\n        hullHash.fill(-1);\n        hullHash[this._hashKey(i0x, i0y)] = i0;\n        hullHash[this._hashKey(i1x, i1y)] = i1;\n        hullHash[this._hashKey(i2x, i2y)] = i2;\n\n        this.trianglesLen = 0;\n        this._addTriangle(i0, i1, i2, -1, -1, -1);\n\n        for (let k = 0, xp, yp; k < this._ids.length; k++) {\n            const i = this._ids[k];\n            const x = coords[2 * i];\n            const y = coords[2 * i + 1];\n\n            // skip near-duplicate points\n            if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON) continue;\n            xp = x;\n            yp = y;\n\n            // skip seed triangle points\n            if (i === i0 || i === i1 || i === i2) continue;\n\n            // find a visible edge on the convex hull using edge hash\n            let start = 0;\n            for (let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++) {\n                start = hullHash[(key + j) % this._hashSize];\n                if (start !== -1 && start !== hullNext[start]) break;\n            }\n\n            start = hullPrev[start];\n            let e = start, q;\n            while (q = hullNext[e], !orient(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1])) {\n                e = q;\n                if (e === start) {\n                    e = -1;\n                    break;\n                }\n            }\n            if (e === -1) continue; // likely a near-duplicate point; skip it\n\n            // add the first triangle from the point\n            let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);\n\n            // recursively flip triangles from the point until they satisfy the Delaunay condition\n            hullTri[i] = this._legalize(t + 2);\n            hullTri[e] = t; // keep track of boundary triangles on the hull\n            hullSize++;\n\n            // walk forward through the hull, adding more triangles and flipping recursively\n            let n = hullNext[e];\n            while (q = hullNext[n], orient(x, y, coords[2 * n], coords[2 * n + 1], coords[2 * q], coords[2 * q + 1])) {\n                t = this._addTriangle(n, i, q, hullTri[i], -1, hullTri[n]);\n                hullTri[i] = this._legalize(t + 2);\n                hullNext[n] = n; // mark as removed\n                hullSize--;\n                n = q;\n            }\n\n            // walk backward from the other side, adding more triangles and flipping\n            if (e === start) {\n                while (q = hullPrev[e], orient(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1])) {\n                    t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);\n                    this._legalize(t + 2);\n                    hullTri[q] = t;\n                    hullNext[e] = e; // mark as removed\n                    hullSize--;\n                    e = q;\n                }\n            }\n\n            // update the hull indices\n            this._hullStart = hullPrev[i] = e;\n            hullNext[e] = hullPrev[n] = i;\n            hullNext[i] = n;\n\n            // save the two new edges in the hash table\n            hullHash[this._hashKey(x, y)] = i;\n            hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;\n        }\n\n        this.hull = new Uint32Array(hullSize);\n        for (let i = 0, e = this._hullStart; i < hullSize; i++) {\n            this.hull[i] = e;\n            e = hullNext[e];\n        }\n\n        // trim typed triangle mesh arrays\n        this.triangles = this._triangles.subarray(0, this.trianglesLen);\n        this.halfedges = this._halfedges.subarray(0, this.trianglesLen);\n    }\n\n    _hashKey(x, y) {\n        return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;\n    }\n\n    _legalize(a) {\n        const {_triangles: triangles, _halfedges: halfedges, coords} = this;\n\n        let i = 0;\n        let ar = 0;\n\n        // recursion eliminated with a fixed-size stack\n        while (true) {\n            const b = halfedges[a];\n\n            /* if the pair of triangles doesn't satisfy the Delaunay condition\n             * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,\n             * then do the same check/flip recursively for the new pair of triangles\n             *\n             *           pl                    pl\n             *          /||\\                  /  \\\n             *       al/ || \\bl            al/    \\a\n             *        /  ||  \\              /      \\\n             *       /  a||b  \\    flip    /___ar___\\\n             *     p0\\   ||   /p1   =>   p0\\---bl---/p1\n             *        \\  ||  /              \\      /\n             *       ar\\ || /br             b\\    /br\n             *          \\||/                  \\  /\n             *           pr                    pr\n             */\n            const a0 = a - a % 3;\n            ar = a0 + (a + 2) % 3;\n\n            if (b === -1) { // convex hull edge\n                if (i === 0) break;\n                a = EDGE_STACK[--i];\n                continue;\n            }\n\n            const b0 = b - b % 3;\n            const al = a0 + (a + 1) % 3;\n            const bl = b0 + (b + 2) % 3;\n\n            const p0 = triangles[ar];\n            const pr = triangles[a];\n            const pl = triangles[al];\n            const p1 = triangles[bl];\n\n            const illegal = inCircle(\n                coords[2 * p0], coords[2 * p0 + 1],\n                coords[2 * pr], coords[2 * pr + 1],\n                coords[2 * pl], coords[2 * pl + 1],\n                coords[2 * p1], coords[2 * p1 + 1]);\n\n            if (illegal) {\n                triangles[a] = p1;\n                triangles[b] = p0;\n\n                const hbl = halfedges[bl];\n\n                // edge swapped on the other side of the hull (rare); fix the halfedge reference\n                if (hbl === -1) {\n                    let e = this._hullStart;\n                    do {\n                        if (this._hullTri[e] === bl) {\n                            this._hullTri[e] = a;\n                            break;\n                        }\n                        e = this._hullPrev[e];\n                    } while (e !== this._hullStart);\n                }\n                this._link(a, hbl);\n                this._link(b, halfedges[ar]);\n                this._link(ar, bl);\n\n                const br = b0 + (b + 1) % 3;\n\n                // don't worry about hitting the cap: it can only happen on extremely degenerate input\n                if (i < EDGE_STACK.length) {\n                    EDGE_STACK[i++] = br;\n                }\n            } else {\n                if (i === 0) break;\n                a = EDGE_STACK[--i];\n            }\n        }\n\n        return ar;\n    }\n\n    _link(a, b) {\n        this._halfedges[a] = b;\n        if (b !== -1) this._halfedges[b] = a;\n    }\n\n    // add a new triangle given vertex indices and adjacent half-edge ids\n    _addTriangle(i0, i1, i2, a, b, c) {\n        const t = this.trianglesLen;\n\n        this._triangles[t] = i0;\n        this._triangles[t + 1] = i1;\n        this._triangles[t + 2] = i2;\n\n        this._link(t, a);\n        this._link(t + 1, b);\n        this._link(t + 2, c);\n\n        this.trianglesLen += 3;\n\n        return t;\n    }\n}\n\n// monotonically increases with real angle, but doesn't need expensive trigonometry\nfunction pseudoAngle(dx, dy) {\n    const p = dx / (Math.abs(dx) + Math.abs(dy));\n    return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]\n}\n\nfunction dist(ax, ay, bx, by) {\n    const dx = ax - bx;\n    const dy = ay - by;\n    return dx * dx + dy * dy;\n}\n\nfunction orient(px, py, qx, qy, rx, ry) {\n    return (qy - py) * (rx - qx) - (qx - px) * (ry - qy) < 0;\n}\n\nfunction inCircle(ax, ay, bx, by, cx, cy, px, py) {\n    const dx = ax - px;\n    const dy = ay - py;\n    const ex = bx - px;\n    const ey = by - py;\n    const fx = cx - px;\n    const fy = cy - py;\n\n    const ap = dx * dx + dy * dy;\n    const bp = ex * ex + ey * ey;\n    const cp = fx * fx + fy * fy;\n\n    return dx * (ey * cp - bp * fy) -\n           dy * (ex * cp - bp * fx) +\n           ap * (ex * fy - ey * fx) < 0;\n}\n\nfunction circumradius(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = 0.5 / (dx * ey - dy * ex);\n\n    const x = (ey * bl - dy * cl) * d;\n    const y = (dx * cl - ex * bl) * d;\n\n    return x * x + y * y;\n}\n\nfunction circumcenter(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = 0.5 / (dx * ey - dy * ex);\n\n    const x = ax + (ey * bl - dy * cl) * d;\n    const y = ay + (dx * cl - ex * bl) * d;\n\n    return {x, y};\n}\n\nfunction quicksort(ids, dists, left, right) {\n    if (right - left <= 20) {\n        for (let i = left + 1; i <= right; i++) {\n            const temp = ids[i];\n            const tempDist = dists[temp];\n            let j = i - 1;\n            while (j >= left && dists[ids[j]] > tempDist) ids[j + 1] = ids[j--];\n            ids[j + 1] = temp;\n        }\n    } else {\n        const median = (left + right) >> 1;\n        let i = left + 1;\n        let j = right;\n        swap(ids, median, i);\n        if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);\n        if (dists[ids[i]] > dists[ids[right]]) swap(ids, i, right);\n        if (dists[ids[left]] > dists[ids[i]]) swap(ids, left, i);\n\n        const temp = ids[i];\n        const tempDist = dists[temp];\n        while (true) {\n            do i++; while (dists[ids[i]] < tempDist);\n            do j--; while (dists[ids[j]] > tempDist);\n            if (j < i) break;\n            swap(ids, i, j);\n        }\n        ids[left + 1] = ids[j];\n        ids[j] = temp;\n\n        if (right - i + 1 >= j - left) {\n            quicksort(ids, dists, i, right);\n            quicksort(ids, dists, left, j - 1);\n        } else {\n            quicksort(ids, dists, left, j - 1);\n            quicksort(ids, dists, i, right);\n        }\n    }\n}\n\nfunction swap(arr, i, j) {\n    const tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\nfunction defaultGetX(p) {\n    return p[0];\n}\nfunction defaultGetY(p) {\n    return p[1];\n}\n","const epsilon = 1e-6;\n\nexport default class Path {\n  constructor() {\n    this._x0 = this._y0 = // start of current subpath\n    this._x1 = this._y1 = null; // end of current subpath\n    this._ = \"\";\n  }\n  moveTo(x, y) {\n    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;\n  }\n  closePath() {\n    if (this._x1 !== null) {\n      this._x1 = this._x0, this._y1 = this._y0;\n      this._ += \"Z\";\n    }\n  }\n  lineTo(x, y) {\n    this._ += `L${this._x1 = +x},${this._y1 = +y}`;\n  }\n  arc(x, y, r) {\n    x = +x, y = +y, r = +r;\n    const x0 = x + r;\n    const y0 = y;\n    if (r < 0) throw new Error(\"negative radius\");\n    if (this._x1 === null) this._ += `M${x0},${y0}`;\n    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) this._ += \"L\" + x0 + \",\" + y0;\n    if (!r) return;\n    this._ += `A${r},${r},0,1,1,${x - r},${y}A${r},${r},0,1,1,${this._x1 = x0},${this._y1 = y0}`;\n  }\n  rect(x, y, w, h) {\n    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${+w}v${+h}h${-w}Z`;\n  }\n  value() {\n    return this._ || null;\n  }\n}\n","export default class Polygon {\n  constructor() {\n    this._ = [];\n  }\n  moveTo(x, y) {\n    this._.push([x, y]);\n  }\n  closePath() {\n    this._.push(this._[0].slice());\n  }\n  lineTo(x, y) {\n    this._.push([x, y]);\n  }\n  value() {\n    return this._.length ? this._ : null;\n  }\n}\n","import Path from \"./path.js\";\nimport Polygon from \"./polygon.js\";\n\nexport default class Voronoi {\n  constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {\n    if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error(\"invalid bounds\");\n    this.delaunay = delaunay;\n    this._circumcenters = new Float64Array(delaunay.points.length * 2);\n    this.vectors = new Float64Array(delaunay.points.length * 2);\n    this.xmax = xmax, this.xmin = xmin;\n    this.ymax = ymax, this.ymin = ymin;\n    this._init();\n  }\n  update() {\n    this.delaunay.update();\n    this._init();\n    return this;\n  }\n  _init() {\n    const {delaunay: {points, hull, triangles}, vectors} = this;\n\n    // Compute circumcenters.\n    const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);\n    for (let i = 0, j = 0, n = triangles.length; i < n; i += 3, j += 2) {\n      const t1 = triangles[i] * 2;\n      const t2 = triangles[i + 1] * 2;\n      const t3 = triangles[i + 2] * 2;\n      const x1 = points[t1];\n      const y1 = points[t1 + 1];\n      const x2 = points[t2];\n      const y2 = points[t2 + 1];\n      const x3 = points[t3];\n      const y3 = points[t3 + 1];\n      const a2 = x1 - x2;\n      const a3 = x1 - x3;\n      const b2 = y1 - y2;\n      const b3 = y1 - y3;\n      const d1 = x1 * x1 + y1 * y1;\n      const d2 = d1 - x2 * x2 - y2 * y2;\n      const d3 = d1 - x3 * x3 - y3 * y3;\n      const ab = (a3 * b2 - a2 * b3) * 2;\n      // degenerate case (2 points)\n      if (!ab) {\n        circumcenters[j] = (x1 + x3) / 2 + 1e8 * b3;\n        circumcenters[j + 1] = (y1 + y3) / 2 - 1e8 * a3;\n      } else {\n        circumcenters[j] = (b2 * d3 - b3 * d2) / ab;\n        circumcenters[j + 1] = (a3 * d2 - a2 * d3) / ab;\n      }\n    }\n\n    // Compute exterior cell rays.\n    let h = hull[hull.length - 1];\n    let p0, p1 = h * 4;\n    let x0, x1 = points[2 * h];\n    let y0, y1 = points[2 * h + 1];\n    vectors.fill(0);\n    for (let i = 0; i < hull.length; ++i) {\n      h = hull[i];\n      p0 = p1, x0 = x1, y0 = y1;\n      p1 = h * 4, x1 = points[2 * h], y1 = points[2 * h + 1];\n      vectors[p0 + 2] = vectors[p1] = y0 - y1;\n      vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;\n    }\n  }\n  render(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {delaunay: {halfedges, inedges, hull}, circumcenters, vectors} = this;\n    if (hull.length <= 1) return null;\n    for (let i = 0, n = halfedges.length; i < n; ++i) {\n      const j = halfedges[i];\n      if (j < i) continue;\n      const ti = Math.floor(i / 3) * 2;\n      const tj = Math.floor(j / 3) * 2;\n      const xi = circumcenters[ti];\n      const yi = circumcenters[ti + 1];\n      const xj = circumcenters[tj];\n      const yj = circumcenters[tj + 1];\n      this._renderSegment(xi, yi, xj, yj, context);\n    }\n    let h0, h1 = hull[hull.length - 1];\n    for (let i = 0; i < hull.length; ++i) {\n      h0 = h1, h1 = hull[i];\n      const t = Math.floor(inedges[h1] / 3) * 2;\n      const x = circumcenters[t];\n      const y = circumcenters[t + 1];\n      const v = h0 * 4;\n      const p = this._project(x, y, vectors[v + 2], vectors[v + 3]);\n      if (p) this._renderSegment(x, y, p[0], p[1], context);\n    }\n    return buffer && buffer.value();\n  }\n  renderBounds(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);\n    return buffer && buffer.value();\n  }\n  renderCell(i, context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const points = this._clip(i);\n    if (points === null) return;\n    context.moveTo(points[0], points[1]);\n    for (let i = 2, n = points.length; i < n; i += 2) {\n      if (points[i] !== points[i-2] || points[i+1] !== points[i-1])\n        context.lineTo(points[i], points[i + 1]);\n    }\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  *cellPolygons() {\n    const {delaunay: {points}} = this;\n    for (let i = 0, n = points.length / 2; i < n; ++i) {\n      const cell = this.cellPolygon(i);\n      if (cell) yield cell;\n    }\n  }\n  cellPolygon(i) {\n    const polygon = new Polygon;\n    this.renderCell(i, polygon);\n    return polygon.value();\n  }\n  _renderSegment(x0, y0, x1, y1, context) {\n    let S;\n    const c0 = this._regioncode(x0, y0);\n    const c1 = this._regioncode(x1, y1);\n    if (c0 === 0 && c1 === 0) {\n      context.moveTo(x0, y0);\n      context.lineTo(x1, y1);\n    } else if (S = this._clipSegment(x0, y0, x1, y1, c0, c1)) {\n      context.moveTo(S[0], S[1]);\n      context.lineTo(S[2], S[3]);\n    }\n  }\n  contains(i, x, y) {\n    if ((x = +x, x !== x) || (y = +y, y !== y)) return false;\n    return this.delaunay._step(i, x, y) === i;\n  }\n  _cell(i) {\n    const {circumcenters, delaunay: {inedges, halfedges, triangles}} = this;\n    const e0 = inedges[i];\n    if (e0 === -1) return null; // coincident point\n    const points = [];\n    let e = e0;\n    do {\n      const t = Math.floor(e / 3);\n      points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) break; // bad triangulation\n      e = halfedges[e];\n    } while (e !== e0 && e !== -1);\n    return points;\n  }\n  _clip(i) {\n    // degenerate case (1 valid point: return the box)\n    if (i === 0 && this.delaunay.hull.length === 1) {\n      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n    }\n    const points = this._cell(i);\n    if (points === null) return null;\n    const {vectors: V} = this;\n    const v = i * 4;\n    return V[v] || V[v + 1]\n        ? this._clipInfinite(i, points, V[v], V[v + 1], V[v + 2], V[v + 3])\n        : this._clipFinite(i, points);\n  }\n  _clipFinite(i, points) {\n    const n = points.length;\n    let P = null;\n    let x0, y0, x1 = points[n - 2], y1 = points[n - 1];\n    let c0, c1 = this._regioncode(x1, y1);\n    let e0, e1;\n    for (let j = 0; j < n; j += 2) {\n      x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1];\n      c0 = c1, c1 = this._regioncode(x1, y1);\n      if (c0 === 0 && c1 === 0) {\n        e0 = e1, e1 = 0;\n        if (P) P.push(x1, y1);\n        else P = [x1, y1];\n      } else {\n        let S, sx0, sy0, sx1, sy1;\n        if (c0 === 0) {\n          if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null) continue;\n          [sx0, sy0, sx1, sy1] = S;\n        } else {\n          if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null) continue;\n          [sx1, sy1, sx0, sy0] = S;\n          e0 = e1, e1 = this._edgecode(sx0, sy0);\n          if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n          if (P) P.push(sx0, sy0);\n          else P = [sx0, sy0];\n        }\n        e0 = e1, e1 = this._edgecode(sx1, sy1);\n        if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n        if (P) P.push(sx1, sy1);\n        else P = [sx1, sy1];\n      }\n    }\n    if (P) {\n      e0 = e1, e1 = this._edgecode(P[0], P[1]);\n      if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n    }\n    return P;\n  }\n  _clipSegment(x0, y0, x1, y1, c0, c1) {\n    while (true) {\n      if (c0 === 0 && c1 === 0) return [x0, y0, x1, y1];\n      if (c0 & c1) return null;\n      let x, y, c = c0 || c1;\n      if (c & 0b1000) x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax;\n      else if (c & 0b0100) x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin;\n      else if (c & 0b0010) y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax;\n      else y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin;\n      if (c0) x0 = x, y0 = y, c0 = this._regioncode(x0, y0);\n      else x1 = x, y1 = y, c1 = this._regioncode(x1, y1);\n    }\n  }\n  _clipInfinite(i, points, vx0, vy0, vxn, vyn) {\n    let P = Array.from(points), p;\n    if (p = this._project(P[0], P[1], vx0, vy0)) P.unshift(p[0], p[1]);\n    if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn)) P.push(p[0], p[1]);\n    if (P = this._clipFinite(i, P)) {\n      for (let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2) {\n        c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);\n        if (c0 && c1) j = this._edge(i, c0, c1, P, j), n = P.length;\n      }\n    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n      P = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];\n    }\n    return P;\n  }\n  _edge(i, e0, e1, P, j) {\n    while (e0 !== e1) {\n      let x, y;\n      switch (e0) {\n        case 0b0101: e0 = 0b0100; continue; // top-left\n        case 0b0100: e0 = 0b0110, x = this.xmax, y = this.ymin; break; // top\n        case 0b0110: e0 = 0b0010; continue; // top-right\n        case 0b0010: e0 = 0b1010, x = this.xmax, y = this.ymax; break; // right\n        case 0b1010: e0 = 0b1000; continue; // bottom-right\n        case 0b1000: e0 = 0b1001, x = this.xmin, y = this.ymax; break; // bottom\n        case 0b1001: e0 = 0b0001; continue; // bottom-left\n        case 0b0001: e0 = 0b0101, x = this.xmin, y = this.ymin; break; // left\n      }\n      if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) {\n        P.splice(j, 0, x, y), j += 2;\n      }\n    }\n    return j;\n  }\n  _project(x0, y0, vx, vy) {\n    let t = Infinity, c, x, y;\n    if (vy < 0) { // top\n      if (y0 <= this.ymin) return null;\n      if ((c = (this.ymin - y0) / vy) < t) y = this.ymin, x = x0 + (t = c) * vx;\n    } else if (vy > 0) { // bottom\n      if (y0 >= this.ymax) return null;\n      if ((c = (this.ymax - y0) / vy) < t) y = this.ymax, x = x0 + (t = c) * vx;\n    }\n    if (vx > 0) { // right\n      if (x0 >= this.xmax) return null;\n      if ((c = (this.xmax - x0) / vx) < t) x = this.xmax, y = y0 + (t = c) * vy;\n    } else if (vx < 0) { // left\n      if (x0 <= this.xmin) return null;\n      if ((c = (this.xmin - x0) / vx) < t) x = this.xmin, y = y0 + (t = c) * vy;\n    }\n    return [x, y];\n  }\n  _edgecode(x, y) {\n    return (x === this.xmin ? 0b0001\n        : x === this.xmax ? 0b0010 : 0b0000)\n        | (y === this.ymin ? 0b0100\n        : y === this.ymax ? 0b1000 : 0b0000);\n  }\n  _regioncode(x, y) {\n    return (x < this.xmin ? 0b0001\n        : x > this.xmax ? 0b0010 : 0b0000)\n        | (y < this.ymin ? 0b0100\n        : y > this.ymax ? 0b1000 : 0b0000);\n  }\n}\n","import Delaunator from \"delaunator\";\nimport Path from \"./path.js\";\nimport Polygon from \"./polygon.js\";\nimport Voronoi from \"./voronoi.js\";\n\nconst tau = 2 * Math.PI;\n\nfunction pointX(p) {\n  return p[0];\n}\n\nfunction pointY(p) {\n  return p[1];\n}\n\nfunction area(hull, points) {\n  let n = hull.length, x0, y0,\n      x1 = points[2 * hull[n - 1]],\n      y1 = points[2 * hull[n - 1] + 1],\n      area = 0;\n\n  for (let i = 0; i < n; i ++) {\n    x0 = x1, y0 = y1;\n    x1 = points[2 * hull[i]];\n    y1 = points[2 * hull[i] + 1];\n    area += y0 * x1 - x0 * y1;\n  }\n\n  return area / 2;\n}\n\nfunction jitter(x, y, r) {\n  return [x + Math.sin(x + y) * r, y + Math.cos(x - y) * r];\n}\n\nexport default class Delaunay {\n  constructor(points) {\n    this._delaunator = new Delaunator(points);\n    this.inedges = new Int32Array(points.length / 2);\n    this._hullIndex = new Int32Array(points.length / 2);\n    this.points = this._delaunator.coords;\n    this._init();\n  }\n  update() {\n    this._delaunator.update();\n    this._init();\n    return this;\n  }\n  _init() {\n    const d = this._delaunator, points = this.points;\n\n    // check for collinear\n    if (d.hull && d.hull.length > 2 && area(d.hull, points) < 1e-10) {\n      this.collinear = Int32Array.from({length: points.length/2}, (_,i) => i)\n        .sort((i, j) => points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1]); // for exact neighbors\n      const e = this.collinear[0], f = this.collinear[this.collinear.length - 1],\n        bounds = [ points[2 * e], points[2 * e + 1], points[2 * f], points[2 * f + 1] ],\n        r = 1e-8 * Math.sqrt((bounds[3] - bounds[1])**2 + (bounds[2] - bounds[0])**2);\n      for (let i = 0, n = points.length / 2; i < n; ++i) {\n        const p = jitter(points[2 * i], points[2 * i + 1], r);\n        points[2 * i] = p[0];\n        points[2 * i + 1] = p[1];\n      }\n      this._delaunator = new Delaunator(points);\n    } else {\n      delete this.collinear;\n    }\n\n    const halfedges = this.halfedges = this._delaunator.halfedges;\n    const hull = this.hull = this._delaunator.hull;\n    const triangles = this.triangles = this._delaunator.triangles;\n    const inedges = this.inedges.fill(-1);\n    const hullIndex = this._hullIndex.fill(-1);\n\n    // Compute an index from each point to an (arbitrary) incoming halfedge\n    // Used to give the first neighbor of each point; for this reason,\n    // on the hull we give priority to exterior halfedges\n    for (let e = 0, n = halfedges.length; e < n; ++e) {\n      const p = triangles[e % 3 === 2 ? e - 2 : e + 1];\n      if (halfedges[e] === -1 || inedges[p] === -1) inedges[p] = e;\n    }\n    for (let i = 0, n = hull.length; i < n; ++i) {\n      hullIndex[hull[i]] = i;\n    }\n\n    // degenerate case: 1 or 2 (distinct) points\n    if (hull.length <= 2 && hull.length > 0) {\n      this.triangles = new Int32Array(3).fill(-1);\n      this.halfedges = new Int32Array(3).fill(-1);\n      this.triangles[0] = hull[0];\n      this.triangles[1] = hull[1];\n      this.triangles[2] = hull[1];\n      inedges[hull[0]] = 1;\n      if (hull.length === 2) inedges[hull[1]] = 0;\n    }\n  }\n  voronoi(bounds) {\n    return new Voronoi(this, bounds);\n  }\n  *neighbors(i) {\n    const {inedges, hull, _hullIndex, halfedges, triangles} = this;\n\n    // degenerate case with several collinear points\n    if (this.collinear) {\n      const l = this.collinear.indexOf(i);\n      if (l > 0) yield this.collinear[l - 1];\n      if (l < this.collinear.length - 1) yield this.collinear[l + 1];\n      return;\n    }\n\n    const e0 = inedges[i];\n    if (e0 === -1) return; // coincident point\n    let e = e0, p0 = -1;\n    do {\n      yield p0 = triangles[e];\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) return; // bad triangulation\n      e = halfedges[e];\n      if (e === -1) {\n        const p = hull[(_hullIndex[i] + 1) % hull.length];\n        if (p !== p0) yield p;\n        return;\n      }\n    } while (e !== e0);\n  }\n  find(x, y, i = 0) {\n    if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;\n    const i0 = i;\n    let c;\n    while ((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0) i = c;\n    return c;\n  }\n  _step(i, x, y) {\n    const {inedges, hull, _hullIndex, halfedges, triangles, points} = this;\n    if (inedges[i] === -1 || !points.length) return (i + 1) % (points.length >> 1);\n    let c = i;\n    let dc = (x - points[i * 2]) ** 2 + (y - points[i * 2 + 1]) ** 2;\n    const e0 = inedges[i];\n    let e = e0;\n    do {\n      let t = triangles[e];\n      const dt = (x - points[t * 2]) ** 2 + (y - points[t * 2 + 1]) ** 2;\n      if (dt < dc) dc = dt, c = t;\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) break; // bad triangulation\n      e = halfedges[e];\n      if (e === -1) {\n        e = hull[(_hullIndex[i] + 1) % hull.length];\n        if (e !== t) {\n          if ((x - points[e * 2]) ** 2 + (y - points[e * 2 + 1]) ** 2 < dc) return e;\n        }\n        break;\n      }\n    } while (e !== e0);\n    return c;\n  }\n  render(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {points, halfedges, triangles} = this;\n    for (let i = 0, n = halfedges.length; i < n; ++i) {\n      const j = halfedges[i];\n      if (j < i) continue;\n      const ti = triangles[i] * 2;\n      const tj = triangles[j] * 2;\n      context.moveTo(points[ti], points[ti + 1]);\n      context.lineTo(points[tj], points[tj + 1]);\n    }\n    this.renderHull(context);\n    return buffer && buffer.value();\n  }\n  renderPoints(context, r = 2) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {points} = this;\n    for (let i = 0, n = points.length; i < n; i += 2) {\n      const x = points[i], y = points[i + 1];\n      context.moveTo(x + r, y);\n      context.arc(x, y, r, 0, tau);\n    }\n    return buffer && buffer.value();\n  }\n  renderHull(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {hull, points} = this;\n    const h = hull[0] * 2, n = hull.length;\n    context.moveTo(points[h], points[h + 1]);\n    for (let i = 1; i < n; ++i) {\n      const h = 2 * hull[i];\n      context.lineTo(points[h], points[h + 1]);\n    }\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  hullPolygon() {\n    const polygon = new Polygon;\n    this.renderHull(polygon);\n    return polygon.value();\n  }\n  renderTriangle(i, context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {points, triangles} = this;\n    const t0 = triangles[i *= 3] * 2;\n    const t1 = triangles[i + 1] * 2;\n    const t2 = triangles[i + 2] * 2;\n    context.moveTo(points[t0], points[t0 + 1]);\n    context.lineTo(points[t1], points[t1 + 1]);\n    context.lineTo(points[t2], points[t2 + 1]);\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  *trianglePolygons() {\n    const {triangles} = this;\n    for (let i = 0, n = triangles.length / 3; i < n; ++i) {\n      yield this.trianglePolygon(i);\n    }\n  }\n  trianglePolygon(i) {\n    const polygon = new Polygon;\n    this.renderTriangle(i, polygon);\n    return polygon.value();\n  }\n}\n\nDelaunay.from = function(points, fx = pointX, fy = pointY, that) {\n  return new Delaunay(\"length\" in points\n      ? flatArray(points, fx, fy, that)\n      : Float64Array.from(flatIterable(points, fx, fy, that)));\n};\n\nfunction flatArray(points, fx, fy, that) {\n  const n = points.length;\n  const array = new Float64Array(n * 2);\n  for (let i = 0; i < n; ++i) {\n    const p = points[i];\n    array[i * 2] = fx.call(that, p, i, points);\n    array[i * 2 + 1] = fy.call(that, p, i, points);\n  }\n  return array;\n}\n\nfunction* flatIterable(points, fx, fy, that) {\n  let i = 0;\n  for (const p of points) {\n    yield fx.call(that, p, i, points);\n    yield fy.call(that, p, i, points);\n    ++i;\n  }\n}\n","export {default as Delaunay} from \"./delaunay.js\";\nexport {default as Voronoi} from \"./voronoi.js\";\n","import { Vec2 } from \"./math/vec2\";\r\nimport { Delaunay, Voronoi } from \"d3-delaunay\";\r\nimport { lerp } from './math/mathf';\r\n\r\nconst NUM_POINTS = 5000;\r\nconst WIDTH = 1280;\r\nconst HEIGHT = 720;\r\n\r\nconst NUM_PLATES = 10;\r\nconst PLATE_COLOR_MAP = [\r\n  \"black\",\r\n  \"blue\",\r\n  \"red\",\r\n  \"purple\",\r\n  \"green\",\r\n  \"teal\",\r\n  \"navy\",\r\n  \"yellow\",\r\n  \"magenta\",\r\n  \"white\",\r\n  \"pink\"\r\n];\r\nconst NUM_PLATE_STEPS = 10;\r\n\r\ninterface IPoint {\r\n  loc: Vec2;\r\n  plateId: number;\r\n  height: number;\r\n}\r\n\r\nlet canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\nlet ctx = canvas.getContext(\"2d\");\r\n\r\nfunction choose<T>(arr: Array<T>): number {\r\n  return Math.floor(Math.random() * arr.length);\r\n}\r\n\r\nfunction generatePoints(): IPoint[] {\r\n  let res = new Array<IPoint>(NUM_POINTS);\r\n  for (let i = 0; i < NUM_POINTS; i++) {\r\n    res[i] = {\r\n      loc: {\r\n        x: Math.random() * WIDTH,\r\n        y: Math.random() * HEIGHT\r\n      },\r\n      plateId: -1,\r\n      height: 0,\r\n    };\r\n  }\r\n  return res;\r\n}\r\n\r\nfunction dist(p1: Vec2, p2: Vec2): number {\r\n  return Math.sqrt((p1.x - p2.x) ** 2 + (p1.y - p2.y) ** 2);\r\n}\r\n\r\nfunction floodFill(points: IPoint[]): IPoint[] {\r\n  let unmapped_points = [...points];\r\n  let res = [];\r\n  for (let i = 0; i < NUM_PLATES; i++) {\r\n    let p_i = choose(unmapped_points);\r\n    let p = unmapped_points.splice(p_i, 1)[0];\r\n    p.plateId = i;\r\n    res.push(p);\r\n  }\r\n  while (unmapped_points.length > 0) {\r\n    let p_i = choose(unmapped_points);\r\n    let p = unmapped_points.splice(p_i, 1)[0];\r\n    let closest_i = -1;\r\n    let closest_dist = 0;\r\n    let rl = res.length;\r\n    for (let i = 0; i < rl; i++) {\r\n      let curr = res[i];\r\n      let d = dist(curr.loc, p.loc);\r\n      if (closest_i == -1 || d < closest_dist) {\r\n        closest_dist = d;\r\n        closest_i = i;\r\n      }\r\n    }\r\n    p.plateId = res[closest_i].plateId;\r\n    res.push(p);\r\n  }\r\n\r\n  return res;\r\n}\r\n\r\nfunction genNeighbors(voronoi: Voronoi<number[]>): number[][] {\r\n  let res = [];\r\n\r\n  let cells: number[][][] = [];\r\n  for (let i = 0; i < NUM_POINTS; i++) {\r\n    cells.push(voronoi.cellPolygon(i));\r\n  }\r\n\r\n  for (let i = 0; i < NUM_POINTS; i++) {\r\n    let cell_poly = voronoi.cellPolygon(i);\r\n    let neighbor_cells = cells.map((val, idx) => ({val, idx})).filter(({val}) => {\r\n      let matched_verts = val.filter(pnt => cell_poly.filter(pnt2 => pnt[0] == pnt2[0] && pnt[1] == pnt[1]).length > 0).length;\r\n      return matched_verts == 2\r\n    }).map(val => val.idx);\r\n    res.push(neighbor_cells);\r\n  }\r\n  \r\n  return res;\r\n}\r\n\r\nfunction heightGen(voronoi: Voronoi<number[]>, points: IPoint[]): IPoint[] {\r\n  let plateDirections: Vec2[] = [];\r\n  for (let plate_idx = 0; plate_idx < NUM_PLATES; plate_idx++) {\r\n    plateDirections.push(new Vec2(\r\n      Math.random() * 2 - 1,\r\n       Math.random() * 2 - 1\r\n    ));\r\n  }\r\n\r\n  let neighbors = genNeighbors(voronoi);\r\n\r\n  for (let i = 0; i < NUM_PLATE_STEPS; i++) {\r\n    for (let cell = 0; cell < NUM_POINTS; cell++) {\r\n      let cell_point = points[cell];\r\n      let neighbor_cells = neighbors[cell];\r\n      for (var neighbor_cell_idx of neighbor_cells) {\r\n        let neighbor_cell_point = points[neighbor_cell_idx];\r\n        let dir = new Vec2(\r\n          neighbor_cell_point.loc.x - cell_point.loc.x,\r\n          neighbor_cell_point.loc.y - cell_point.loc.y,\r\n        );\r\n        let cell_plate_dir = plateDirections[cell_point.plateId];\r\n        let dot = dir.x * cell_plate_dir.x + dir.y * cell_plate_dir.y;\r\n        if (dot > 0) {\r\n          if (neighbor_cell_point.height - cell_point.height <= 3) {\r\n            neighbor_cell_point.height++;\r\n          } else {\r\n            cell_point.height++;\r\n          }\r\n        } else {\r\n          if (cell_point.height - neighbor_cell_point.height <= 3) {\r\n            neighbor_cell_point.height--;\r\n          } else {\r\n            cell_point.height--;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return points;\r\n}\r\n\r\nfunction main() {\r\n  let points = generatePoints();\r\n  floodFill(points);\r\n  let voronoi_points = points.map(val => [val.loc.x, val.loc.y]);\r\n  let delaunay = Delaunay.from(voronoi_points);\r\n  let voronoi = delaunay.voronoi([0, 0, WIDTH, HEIGHT]);\r\n\r\n  for (let i = 0; i < NUM_POINTS; i++) {\r\n    let cp = voronoi.cellPolygon(i);\r\n    points[i].loc.x = cp.reduce((agg, val) => agg + val[0], 0) / cp.length;\r\n    points[i].loc.y = cp.reduce((agg, val) => agg + val[1], 0) / cp.length;\r\n  }\r\n\r\n  voronoi_points = points.map(val => [val.loc.x, val.loc.y]);\r\n  delaunay = Delaunay.from(voronoi_points);\r\n  voronoi = delaunay.voronoi([0, 0, WIDTH, HEIGHT]);\r\n\r\n  heightGen(voronoi, points);\r\n\r\n  let min_height = points.reduce((agg, curr) => (curr.height < agg ? curr.height : agg), points[0].height);\r\n  let max_height = points.reduce((agg, curr) => (curr.height > agg ? curr.height : agg), points[0].height);\r\n\r\n  ctx.clearRect(0, 0, 800, 600);\r\n\r\n  ctx.strokeStyle = \"black\";\r\n  for (let plate_idx = 0; plate_idx < NUM_PLATES; plate_idx++) {\r\n    console.log(\"Rendering \" + ctx.fillStyle);\r\n    let pts = points\r\n      .map((val, idx) => ({ p: val, idx }))\r\n      .filter(val => val.p.plateId === plate_idx);\r\n    let pl = pts.length;\r\n    for (let i = 0; i < pl; i++) {\r\n      ctx.beginPath();\r\n      \r\n      let p = pts[i];\r\n      voronoi.renderCell(p.idx, ctx);\r\n\r\n      let height_percent = (p.p.height - min_height) / (max_height - min_height) * 100;\r\n      ctx.fillStyle = `rgb(${height_percent}%, ${height_percent}%, ${height_percent}%)`\r\n      ctx.fill();\r\n      ctx.stroke();\r\n    }\r\n\r\n    // ctx.fillStyle = PLATE_COLOR_MAP[plate_idx];\r\n    // ctx.fill();\r\n    // ctx.stroke();\r\n    \r\n  }\r\n}\r\n\r\nmain();"]}