{"version":3,"sources":["../node_modules/delaunator/index.js","../node_modules/d3-delaunay/src/path.js","../node_modules/d3-delaunay/src/polygon.js","../node_modules/d3-delaunay/src/voronoi.js","../node_modules/d3-delaunay/src/delaunay.js","../node_modules/d3-delaunay/src/index.js","main.ts"],"names":["EPSILON","Math","pow","Delaunator","from","points","getX","getY","defaultGetX","defaultGetY","n","length","coords","Float64Array","i","p","constructor","minX","Infinity","minY","maxX","maxY","ids","Uint32Array","Error","x","y","cx","cy","minDist","i0","i1","i2","d","dist","i0x","i0y","i1x","i1y","minRadius","r","circumradius","i2x","i2y","orient","center","circumcenter","_cx","_cy","quicksort","_hashSize","ceil","sqrt","_hash","Array","e","hull","insertNode","_hashEdge","t","maxTriangles","triangles","halfedges","Int32Array","trianglesLen","_addTriangle","xp","yp","k","abs","startKey","_hashKey","key","start","removed","prev","next","walkBack","_legalize","q","removeNode","subarray","floor","pseudoAngle","a","b","a0","b0","al","ar","bl","p0","pr","pl","p1","illegal","inCircle","hbl","_link","br","c","dx","dy","ax","ay","bx","by","px","py","qx","qy","rx","ry","ex","ey","fx","fy","bp","cp","cl","node","left","right","j","temp","compare","swap","d1","arr","tmp","epsilon","Path","_x0","_y0","_x1","_y1","_","moveTo","closePath","lineTo","arc","x0","y0","rect","w","h","value","Polygon","push","slice","Voronoi","delaunay","xmin","ymin","xmax","ymax","circumcenters","vectors","t1","t2","t3","x1","y1","x2","y2","x3","y3","a2","a3","b2","b3","d2","d3","ab","render","context","buffer","undefined","ti","tj","xi","yi","xj","yj","_renderSegment","v","_project","renderBounds","renderCell","_clip","cellPolygons","cell","cellPolygon","polygon","S","c0","_regioncode","c1","_clipSegment","contains","_step","_cell","inedges","e0","V","_clipInfinite","_clipFinite","P","e1","sx0","sy0","sx1","sy1","_edgecode","_edge","vx0","vy0","vxn","vyn","unshift","splice","vx","vy","tau","PI","pointX","pointY","Delaunay","fill","outedges","node0","node1","voronoi","bounds","neighbors","find","dc","dt","renderHull","renderPoints","hullPolygon","renderTriangle","t0","trianglePolygons","trianglePolygon","flatArray","that","array","call","flatIterable"],"mappings":"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","file":"main.a81b550e.js","sourceRoot":"..\\src","sourcesContent":["\nconst EPSILON = Math.pow(2, -52);\n\nexport default class Delaunator {\n\n    static from(points, getX, getY) {\n        if (!getX) getX = defaultGetX;\n        if (!getY) getY = defaultGetY;\n\n        const n = points.length;\n        const coords = new Float64Array(n * 2);\n\n        for (let i = 0; i < n; i++) {\n            const p = points[i];\n            coords[2 * i] = getX(p);\n            coords[2 * i + 1] = getY(p);\n        }\n\n        return new Delaunator(coords);\n    }\n\n    constructor(coords) {\n        let minX = Infinity;\n        let minY = Infinity;\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n\n        const n = coords.length >> 1;\n        const ids = this.ids = new Uint32Array(n);\n\n        if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');\n\n        this.coords = coords;\n\n        for (let i = 0; i < n; i++) {\n            const x = coords[2 * i];\n            const y = coords[2 * i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n            ids[i] = i;\n        }\n\n        const cx = (minX + maxX) / 2;\n        const cy = (minY + maxY) / 2;\n\n        let minDist = Infinity;\n        let i0, i1, i2;\n\n        // pick a seed point close to the centroid\n        for (let i = 0; i < n; i++) {\n            const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);\n            if (d < minDist) {\n                i0 = i;\n                minDist = d;\n            }\n        }\n        const i0x = coords[2 * i0];\n        const i0y = coords[2 * i0 + 1];\n\n        minDist = Infinity;\n\n        // find the point closest to the seed\n        for (let i = 0; i < n; i++) {\n            if (i === i0) continue;\n            const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);\n            if (d < minDist && d > 0) {\n                i1 = i;\n                minDist = d;\n            }\n        }\n        let i1x = coords[2 * i1];\n        let i1y = coords[2 * i1 + 1];\n\n        let minRadius = Infinity;\n\n        // find the third point which forms the smallest circumcircle with the first two\n        for (let i = 0; i < n; i++) {\n            if (i === i0 || i === i1) continue;\n            const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);\n            if (r < minRadius) {\n                i2 = i;\n                minRadius = r;\n            }\n        }\n        let i2x = coords[2 * i2];\n        let i2y = coords[2 * i2 + 1];\n\n        if (minRadius === Infinity) {\n            throw new Error('No Delaunay triangulation exists for this input.');\n        }\n\n        // swap the order of the seed points for counter-clockwise orientation\n        if (orient(i0x, i0y, i1x, i1y, i2x, i2y)) {\n            const i = i1;\n            const x = i1x;\n            const y = i1y;\n            i1 = i2;\n            i1x = i2x;\n            i1y = i2y;\n            i2 = i;\n            i2x = x;\n            i2y = y;\n        }\n\n        const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);\n        this._cx = center.x;\n        this._cy = center.y;\n\n        // sort the points by distance from the seed triangle circumcenter\n        quicksort(ids, coords, 0, ids.length - 1, center.x, center.y);\n\n        // initialize a hash table for storing edges of the advancing convex hull\n        this._hashSize = Math.ceil(Math.sqrt(n));\n        this._hash = new Array(this._hashSize);\n\n        // initialize a circular doubly-linked list that will hold an advancing convex hull\n        let e = this.hull = insertNode(coords, i0);\n        this._hashEdge(e);\n        e.t = 0;\n        e = insertNode(coords, i1, e);\n        this._hashEdge(e);\n        e.t = 1;\n        e = insertNode(coords, i2, e);\n        this._hashEdge(e);\n        e.t = 2;\n\n        const maxTriangles = 2 * n - 5;\n        const triangles = this.triangles = new Uint32Array(maxTriangles * 3);\n        const halfedges = this.halfedges = new Int32Array(maxTriangles * 3);\n\n        this.trianglesLen = 0;\n\n        this._addTriangle(i0, i1, i2, -1, -1, -1);\n\n        for (let k = 0, xp, yp; k < ids.length; k++) {\n            const i = ids[k];\n            const x = coords[2 * i];\n            const y = coords[2 * i + 1];\n\n            // skip near-duplicate points\n            if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON) continue;\n            xp = x;\n            yp = y;\n\n            // skip seed triangle points\n            if (i === i0 || i === i1 || i === i2) continue;\n\n            // find a visible edge on the convex hull using edge hash\n            const startKey = this._hashKey(x, y);\n            let key = startKey;\n            let start;\n            do {\n                start = this._hash[key];\n                key = (key + 1) % this._hashSize;\n            } while ((!start || start.removed) && key !== startKey);\n\n            start = start.prev;\n            e = start;\n            while (!orient(x, y, e.x, e.y, e.next.x, e.next.y)) {\n                e = e.next;\n                if (e === start) {\n                    e = null;\n                    break;\n                }\n            }\n            // likely a near-duplicate point; skip it\n            if (!e) continue;\n\n            const walkBack = e === start;\n\n            // add the first triangle from the point\n            let t = this._addTriangle(e.i, i, e.next.i, -1, -1, e.t);\n\n            e.t = t; // keep track of boundary triangles on the hull\n            e = insertNode(coords, i, e);\n\n            // recursively flip triangles from the point until they satisfy the Delaunay condition\n            e.t = this._legalize(t + 2);\n\n            // walk forward through the hull, adding more triangles and flipping recursively\n            let q = e.next;\n            while (orient(x, y, q.x, q.y, q.next.x, q.next.y)) {\n                t = this._addTriangle(q.i, i, q.next.i, q.prev.t, -1, q.t);\n                q.prev.t = this._legalize(t + 2);\n                this.hull = removeNode(q);\n                q = q.next;\n            }\n\n            if (walkBack) {\n                // walk backward from the other side, adding more triangles and flipping\n                q = e.prev;\n                while (orient(x, y, q.prev.x, q.prev.y, q.x, q.y)) {\n                    t = this._addTriangle(q.prev.i, i, q.i, -1, q.t, q.prev.t);\n                    this._legalize(t + 2);\n                    q.prev.t = t;\n                    this.hull = removeNode(q);\n                    q = q.prev;\n                }\n            }\n\n            // save the two new edges in the hash table\n            this._hashEdge(e);\n            this._hashEdge(e.prev);\n        }\n\n        // trim typed triangle mesh arrays\n        this.triangles = triangles.subarray(0, this.trianglesLen);\n        this.halfedges = halfedges.subarray(0, this.trianglesLen);\n    }\n\n    _hashEdge(e) {\n        this._hash[this._hashKey(e.x, e.y)] = e;\n    }\n\n    _hashKey(x, y) {\n        return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;\n    }\n\n    _legalize(a) {\n        const {triangles, coords, halfedges} = this;\n\n        const b = halfedges[a];\n\n        /* if the pair of triangles doesn't satisfy the Delaunay condition\n         * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,\n         * then do the same check/flip recursively for the new pair of triangles\n         *\n         *           pl                    pl\n         *          /||\\                  /  \\\n         *       al/ || \\bl            al/    \\a\n         *        /  ||  \\              /      \\\n         *       /  a||b  \\    flip    /___ar___\\\n         *     p0\\   ||   /p1   =>   p0\\---bl---/p1\n         *        \\  ||  /              \\      /\n         *       ar\\ || /br             b\\    /br\n         *          \\||/                  \\  /\n         *           pr                    pr\n         */\n        const a0 = a - a % 3;\n        const b0 = b - b % 3;\n\n        const al = a0 + (a + 1) % 3;\n        const ar = a0 + (a + 2) % 3;\n        const bl = b0 + (b + 2) % 3;\n\n        if (b === -1) return ar;\n\n        const p0 = triangles[ar];\n        const pr = triangles[a];\n        const pl = triangles[al];\n        const p1 = triangles[bl];\n\n        const illegal = inCircle(\n            coords[2 * p0], coords[2 * p0 + 1],\n            coords[2 * pr], coords[2 * pr + 1],\n            coords[2 * pl], coords[2 * pl + 1],\n            coords[2 * p1], coords[2 * p1 + 1]);\n\n        if (illegal) {\n            triangles[a] = p1;\n            triangles[b] = p0;\n\n            const hbl = halfedges[bl];\n\n            // edge swapped on the other side of the hull (rare); fix the halfedge reference\n            if (hbl === -1) {\n                let e = this.hull;\n                do {\n                    if (e.t === bl) {\n                        e.t = a;\n                        break;\n                    }\n                    e = e.next;\n                } while (e !== this.hull);\n            }\n            this._link(a, hbl);\n            this._link(b, halfedges[ar]);\n            this._link(ar, bl);\n\n            const br = b0 + (b + 1) % 3;\n\n            this._legalize(a);\n            return this._legalize(br);\n        }\n\n        return ar;\n    }\n\n    _link(a, b) {\n        this.halfedges[a] = b;\n        if (b !== -1) this.halfedges[b] = a;\n    }\n\n    // add a new triangle given vertex indices and adjacent half-edge ids\n    _addTriangle(i0, i1, i2, a, b, c) {\n        const t = this.trianglesLen;\n\n        this.triangles[t] = i0;\n        this.triangles[t + 1] = i1;\n        this.triangles[t + 2] = i2;\n\n        this._link(t, a);\n        this._link(t + 1, b);\n        this._link(t + 2, c);\n\n        this.trianglesLen += 3;\n\n        return t;\n    }\n}\n\n// monotonically increases with real angle, but doesn't need expensive trigonometry\nfunction pseudoAngle(dx, dy) {\n    const p = dx / (Math.abs(dx) + Math.abs(dy));\n    return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]\n}\n\nfunction dist(ax, ay, bx, by) {\n    const dx = ax - bx;\n    const dy = ay - by;\n    return dx * dx + dy * dy;\n}\n\nfunction orient(px, py, qx, qy, rx, ry) {\n    return (qy - py) * (rx - qx) - (qx - px) * (ry - qy) < 0;\n}\n\nfunction inCircle(ax, ay, bx, by, cx, cy, px, py) {\n    const dx = ax - px;\n    const dy = ay - py;\n    const ex = bx - px;\n    const ey = by - py;\n    const fx = cx - px;\n    const fy = cy - py;\n\n    const ap = dx * dx + dy * dy;\n    const bp = ex * ex + ey * ey;\n    const cp = fx * fx + fy * fy;\n\n    return dx * (ey * cp - bp * fy) -\n           dy * (ex * cp - bp * fx) +\n           ap * (ex * fy - ey * fx) < 0;\n}\n\nfunction circumradius(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = dx * ey - dy * ex;\n\n    const x = (ey * bl - dy * cl) * 0.5 / d;\n    const y = (dx * cl - ex * bl) * 0.5 / d;\n\n    return bl && cl && d && (x * x + y * y) || Infinity;\n}\n\nfunction circumcenter(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = dx * ey - dy * ex;\n\n    const x = ax + (ey * bl - dy * cl) * 0.5 / d;\n    const y = ay + (dx * cl - ex * bl) * 0.5 / d;\n\n    return {x, y};\n}\n\n// create a new node in a doubly linked list\nfunction insertNode(coords, i, prev) {\n    const node = {\n        i,\n        x: coords[2 * i],\n        y: coords[2 * i + 1],\n        t: 0,\n        prev: null,\n        next: null,\n        removed: false\n    };\n\n    if (!prev) {\n        node.prev = node;\n        node.next = node;\n\n    } else {\n        node.next = prev.next;\n        node.prev = prev;\n        prev.next.prev = node;\n        prev.next = node;\n    }\n    return node;\n}\n\nfunction removeNode(node) {\n    node.prev.next = node.next;\n    node.next.prev = node.prev;\n    node.removed = true;\n    return node.prev;\n}\n\nfunction quicksort(ids, coords, left, right, cx, cy) {\n    let i, j, temp;\n\n    if (right - left <= 20) {\n        for (i = left + 1; i <= right; i++) {\n            temp = ids[i];\n            j = i - 1;\n            while (j >= left && compare(coords, ids[j], temp, cx, cy) > 0) ids[j + 1] = ids[j--];\n            ids[j + 1] = temp;\n        }\n    } else {\n        const median = (left + right) >> 1;\n        i = left + 1;\n        j = right;\n        swap(ids, median, i);\n        if (compare(coords, ids[left], ids[right], cx, cy) > 0) swap(ids, left, right);\n        if (compare(coords, ids[i], ids[right], cx, cy) > 0) swap(ids, i, right);\n        if (compare(coords, ids[left], ids[i], cx, cy) > 0) swap(ids, left, i);\n\n        temp = ids[i];\n        while (true) {\n            do i++; while (compare(coords, ids[i], temp, cx, cy) < 0);\n            do j--; while (compare(coords, ids[j], temp, cx, cy) > 0);\n            if (j < i) break;\n            swap(ids, i, j);\n        }\n        ids[left + 1] = ids[j];\n        ids[j] = temp;\n\n        if (right - i + 1 >= j - left) {\n            quicksort(ids, coords, i, right, cx, cy);\n            quicksort(ids, coords, left, j - 1, cx, cy);\n        } else {\n            quicksort(ids, coords, left, j - 1, cx, cy);\n            quicksort(ids, coords, i, right, cx, cy);\n        }\n    }\n}\n\nfunction compare(coords, i, j, cx, cy) {\n    const d1 = dist(coords[2 * i], coords[2 * i + 1], cx, cy);\n    const d2 = dist(coords[2 * j], coords[2 * j + 1], cx, cy);\n    return (d1 - d2) || (coords[2 * i] - coords[2 * j]) || (coords[2 * i + 1] - coords[2 * j + 1]);\n}\n\nfunction swap(arr, i, j) {\n    const tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\nfunction defaultGetX(p) {\n    return p[0];\n}\nfunction defaultGetY(p) {\n    return p[1];\n}\n","const epsilon = 1e-6;\n\nexport default class Path {\n  constructor() {\n    this._x0 = this._y0 = // start of current subpath\n    this._x1 = this._y1 = null; // end of current subpath\n    this._ = \"\";\n  }\n  moveTo(x, y) {\n    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;\n  }\n  closePath() {\n    if (this._x1 !== null) {\n      this._x1 = this._x0, this._y1 = this._y0;\n      this._ += \"Z\";\n    }\n  }\n  lineTo(x, y) {\n    this._ += `L${this._x1 = +x},${this._y1 = +y}`;\n  }\n  arc(x, y, r) {\n    x = +x, y = +y, r = +r;\n    const x0 = x + r;\n    const y0 = y;\n    if (r < 0) throw new Error(\"negative radius\");\n    if (this._x1 === null) this._ += `M${x0},${y0}`;\n    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) this._ += \"L\" + x0 + \",\" + y0;\n    if (!r) return;\n    this._ += `A${r},${r},0,1,1,${x - r},${y}A${r},${r},0,1,1,${this._x1 = x0},${this._y1 = y0}`;\n  }\n  rect(x, y, w, h) {\n    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${+w}v${+h}h${-w}Z`;\n  }\n  value() {\n    return this._ || null;\n  }\n}\n","export default class Polygon {\n  constructor() {\n    this._ = [];\n  }\n  moveTo(x, y) {\n    this._.push([x, y]);\n  }\n  closePath() {\n    this._.push(this._[0].slice());\n  }\n  lineTo(x, y) {\n    this._.push([x, y]);\n  }\n  value() {\n    return this._.length ? this._ : null;\n  }\n}\n","import Path from \"./path.js\";\nimport Polygon from \"./polygon.js\";\n\nexport default class Voronoi {\n  constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {\n    if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error(\"invalid bounds\");\n    const {points, hull, triangles} = this.delaunay = delaunay;\n    const circumcenters = this.circumcenters = new Float64Array(triangles.length / 3 * 2);\n    const vectors = this.vectors = new Float64Array(points.length * 2);\n    this.xmax = xmax, this.xmin = xmin;\n    this.ymax = ymax, this.ymin = ymin;\n\n    // Compute circumcenters.\n    for (let i = 0, j = 0, n = triangles.length; i < n; i += 3, j += 2) {\n      const t1 = triangles[i] * 2;\n      const t2 = triangles[i + 1] * 2;\n      const t3 = triangles[i + 2] * 2;\n      const x1 = points[t1];\n      const y1 = points[t1 + 1];\n      const x2 = points[t2];\n      const y2 = points[t2 + 1];\n      const x3 = points[t3];\n      const y3 = points[t3 + 1];\n      const a2 = x1 - x2;\n      const a3 = x1 - x3;\n      const b2 = y1 - y2;\n      const b3 = y1 - y3;\n      const d1 = x1 * x1 + y1 * y1;\n      const d2 = d1 - x2 * x2 - y2 * y2;\n      const d3 = d1 - x3 * x3 - y3 * y3;\n      const ab = (a3 * b2 - a2 * b3) * 2;\n      circumcenters[j] = (b2 * d3 - b3 * d2) / ab;\n      circumcenters[j + 1] = (a3 * d2 - a2 * d3) / ab;\n    }\n\n    // Compute exterior cell rays.\n    let node = hull;\n    let p0, p1 = node.i * 4;\n    let x0, x1 = node.x;\n    let y0, y1 = node.y;\n    do {\n      node = node.next, p0 = p1, x0 = x1, y0 = y1, p1 = node.i * 4, x1 = node.x, y1 = node.y;\n      vectors[p0 + 2] = vectors[p1] = y0 - y1;\n      vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;\n    } while (node !== hull);\n  }\n  render(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {delaunay: {halfedges, hull}, circumcenters, vectors} = this;\n    for (let i = 0, n = halfedges.length; i < n; ++i) {\n      const j = halfedges[i];\n      if (j < i) continue;\n      const ti = Math.floor(i / 3) * 2;\n      const tj = Math.floor(j / 3) * 2;\n      const xi = circumcenters[ti];\n      const yi = circumcenters[ti + 1];\n      const xj = circumcenters[tj];\n      const yj = circumcenters[tj + 1];\n      this._renderSegment(xi, yi, xj, yj, context);\n    }\n    let node = hull;\n    do {\n      node = node.next;\n      const t = Math.floor(node.t / 3) * 2;\n      const x = circumcenters[t];\n      const y = circumcenters[t + 1];\n      const v = node.i * 4;\n      const p = this._project(x, y, vectors[v + 2], vectors[v + 3]);\n      if (p) this._renderSegment(x, y, p[0], p[1], context);\n    } while (node !== hull);\n    return buffer && buffer.value();\n  }\n  renderBounds(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);\n    return buffer && buffer.value();\n  }\n  renderCell(i, context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const points = this._clip(i);\n    if (points === null) return;\n    context.moveTo(points[0], points[1]);\n    for (let i = 2, n = points.length; i < n; i += 2) {\n      context.lineTo(points[i], points[i + 1]);\n    }\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  *cellPolygons() {\n    const {delaunay: {points}} = this;\n    for (let i = 0, n = points.length / 2; i < n; ++i) {\n      const cell = this.cellPolygon(i);\n      if (cell) yield cell;\n    }\n  }\n  cellPolygon(i) {\n    const polygon = new Polygon;\n    this.renderCell(i, polygon);\n    return polygon.value();\n  }\n  _renderSegment(x0, y0, x1, y1, context) {\n    let S;\n    const c0 = this._regioncode(x0, y0);\n    const c1 = this._regioncode(x1, y1);\n    if (c0 === 0 && c1 === 0) {\n      context.moveTo(x0, y0);\n      context.lineTo(x1, y1);\n    } else if (S = this._clipSegment(x0, y0, x1, y1, c0, c1)) {\n      context.moveTo(S[0], S[1]);\n      context.lineTo(S[2], S[3]);\n    }\n  }\n  contains(i, x, y) {\n    if ((x = +x, x !== x) || (y = +y, y !== y)) return false;\n    return this.delaunay._step(i, x, y) === i;\n  }\n  _cell(i) {\n    const {circumcenters, delaunay: {inedges, halfedges, triangles}} = this;\n    const e0 = inedges[i];\n    if (e0 === -1) return null; // coincident point\n    const points = [];\n    let e = e0;\n    do {\n      const t = Math.floor(e / 3);\n      points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) break; // bad triangulation\n      e = halfedges[e];\n    } while (e !== e0 && e !== -1);\n    return points;\n  }\n  _clip(i) {\n    const points = this._cell(i);\n    if (points === null) return null;\n    const {vectors: V} = this;\n    const v = i * 4;\n    return V[v] || V[v + 1]\n        ? this._clipInfinite(i, points, V[v], V[v + 1], V[v + 2], V[v + 3])\n        : this._clipFinite(i, points);\n  }\n  _clipFinite(i, points) {\n    const n = points.length;\n    let P = null;\n    let x0, y0, x1 = points[n - 2], y1 = points[n - 1];\n    let c0, c1 = this._regioncode(x1, y1);\n    let e0, e1;\n    for (let j = 0; j < n; j += 2) {\n      x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1];\n      c0 = c1, c1 = this._regioncode(x1, y1);\n      if (c0 === 0 && c1 === 0) {\n        e0 = e1, e1 = 0;\n        if (P) P.push(x1, y1);\n        else P = [x1, y1];\n      } else {\n        let S, sx0, sy0, sx1, sy1;\n        if (c0 === 0) {\n          if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null) continue;\n          [sx0, sy0, sx1, sy1] = S;\n        } else {\n          if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null) continue;\n          [sx1, sy1, sx0, sy0] = S;\n          e0 = e1, e1 = this._edgecode(sx0, sy0);\n          if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n          if (P) P.push(sx0, sy0);\n          else P = [sx0, sy0];\n        }\n        e0 = e1, e1 = this._edgecode(sx1, sy1);\n        if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n        if (P) P.push(sx1, sy1);\n        else P = [sx1, sy1];\n      }\n    }\n    if (P) {\n      e0 = e1, e1 = this._edgecode(P[0], P[1]);\n      if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n    }\n    return P;\n  }\n  _clipSegment(x0, y0, x1, y1, c0, c1) {\n    while (true) {\n      if (c0 === 0 && c1 === 0) return [x0, y0, x1, y1];\n      if (c0 & c1) return null;\n      let x, y, c = c0 || c1;\n      if (c & 0b1000) x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax;\n      else if (c & 0b0100) x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin;\n      else if (c & 0b0010) y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax;\n      else y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin;\n      if (c0) x0 = x, y0 = y, c0 = this._regioncode(x0, y0);\n      else x1 = x, y1 = y, c1 = this._regioncode(x1, y1);\n    }\n  }\n  _clipInfinite(i, points, vx0, vy0, vxn, vyn) {\n    let P = Array.from(points), p;\n    if (p = this._project(P[0], P[1], vx0, vy0)) P.unshift(p[0], p[1]);\n    if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn)) P.push(p[0], p[1]);\n    if (P = this._clipFinite(i, P)) {\n      for (let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2) {\n        c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);\n        if (c0 && c1) j = this._edge(i, c0, c1, P, j), n = P.length;\n      }\n    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n      P = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];\n    }\n    return P;\n  }\n  _edge(i, e0, e1, P, j) {\n    while (e0 !== e1) {\n      let x, y;\n      switch (e0) {\n        case 0b0101: e0 = 0b0100; continue; // top-left\n        case 0b0100: e0 = 0b0110, x = this.xmax, y = this.ymin; break; // top\n        case 0b0110: e0 = 0b0010; continue; // top-right\n        case 0b0010: e0 = 0b1010, x = this.xmax, y = this.ymax; break; // right\n        case 0b1010: e0 = 0b1000; continue; // bottom-right\n        case 0b1000: e0 = 0b1001, x = this.xmin, y = this.ymax; break; // bottom\n        case 0b1001: e0 = 0b0001; continue; // bottom-left\n        case 0b0001: e0 = 0b0101, x = this.xmin, y = this.ymin; break; // left\n      }\n      if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) {\n        P.splice(j, 0, x, y), j += 2;\n      }\n    }\n    return j;\n  }\n  _project(x0, y0, vx, vy) {\n    let t = Infinity, c, x, y;\n    if (vy < 0) { // top\n      if (y0 <= this.ymin) return null;\n      if ((c = (this.ymin - y0) / vy) < t) y = this.ymin, x = x0 + (t = c) * vx;\n    } else if (vy > 0) { // bottom\n      if (y0 >= this.ymax) return null;\n      if ((c = (this.ymax - y0) / vy) < t) y = this.ymax, x = x0 + (t = c) * vx;\n    }\n    if (vx > 0) { // right\n      if (x0 >= this.xmax) return null;\n      if ((c = (this.xmax - x0) / vx) < t) x = this.xmax, y = y0 + (t = c) * vy;\n    } else if (vx < 0) { // left\n      if (x0 <= this.xmin) return null;\n      if ((c = (this.xmin - x0) / vx) < t) x = this.xmin, y = y0 + (t = c) * vy;\n    }\n    return [x, y];\n  }\n  _edgecode(x, y) {\n    return (x === this.xmin ? 0b0001\n        : x === this.xmax ? 0b0010 : 0b0000)\n        | (y === this.ymin ? 0b0100\n        : y === this.ymax ? 0b1000 : 0b0000);\n  }\n  _regioncode(x, y) {\n    return (x < this.xmin ? 0b0001\n        : x > this.xmax ? 0b0010 : 0b0000)\n        | (y < this.ymin ? 0b0100\n        : y > this.ymax ? 0b1000 : 0b0000);\n  }\n}\n","import Delaunator from \"delaunator\";\nimport Path from \"./path.js\";\nimport Polygon from \"./polygon.js\";\nimport Voronoi from \"./voronoi.js\";\n\nconst tau = 2 * Math.PI;\n\nfunction pointX(p) {\n  return p[0];\n}\n\nfunction pointY(p) {\n  return p[1];\n}\n\nexport default class Delaunay {\n  constructor(points) {\n    const {halfedges, hull, triangles} = new Delaunator(points);\n    this.points = points;\n    this.halfedges = halfedges;\n    this.hull = hull;\n    this.triangles = triangles;\n    const inedges = this.inedges = new Int32Array(points.length / 2).fill(-1);\n    const outedges = this.outedges = new Int32Array(points.length / 2).fill(-1);\n\n    // Compute an index from each point to an (arbitrary) incoming halfedge.\n    for (let e = 0, n = halfedges.length; e < n; ++e) {\n      inedges[triangles[e % 3 === 2 ? e - 2 : e + 1]] = e;\n    }\n\n    // For points on the hull, index both the incoming and outgoing halfedges.\n    let node0, node1 = hull;\n    do {\n      node0 = node1, node1 = node1.next;\n      inedges[node1.i] = node0.t;\n      outedges[node0.i] = node1.t;\n    } while (node1 !== hull);\n  }\n  voronoi(bounds) {\n    return new Voronoi(this, bounds);\n  }\n  *neighbors(i) {\n    const {inedges, outedges, halfedges, triangles} = this;\n    const e0 = inedges[i];\n    if (e0 === -1) return; // coincident point\n    let e = e0;\n    do {\n      yield triangles[e];\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) return; // bad triangulation\n      e = halfedges[e];\n      if (e === -1) return yield triangles[outedges[i]];\n    } while (e !== e0);\n  }\n  find(x, y, i = 0) {\n    if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;\n    let c;\n    while ((c = this._step(i, x, y)) >= 0 && c !== i) i = c;\n    return c;\n  }\n  _step(i, x, y) {\n    const {inedges, points} = this;\n    if (inedges[i] === -1) return -1; // coincident point\n    let c = i;\n    let dc = (x - points[i * 2]) ** 2 + (y - points[i * 2 + 1]) ** 2;\n    for (const t of this.neighbors(i)) {\n      const dt = (x - points[t * 2]) ** 2 + (y - points[t * 2 + 1]) ** 2;\n      if (dt < dc) dc = dt, c = t;\n    }\n    return c;\n  }\n  render(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {points, halfedges, triangles} = this;\n    for (let i = 0, n = halfedges.length; i < n; ++i) {\n      const j = halfedges[i];\n      if (j < i) continue;\n      const ti = triangles[i] * 2;\n      const tj = triangles[j] * 2;\n      context.moveTo(points[ti], points[ti + 1]);\n      context.lineTo(points[tj], points[tj + 1]);\n    }\n    this.renderHull(context);\n    return buffer && buffer.value();\n  }\n  renderPoints(context, r = 2) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {points} = this;\n    for (let i = 0, n = points.length; i < n; i += 2) {\n      const x = points[i], y = points[i + 1];\n      context.moveTo(x + r, y);\n      context.arc(x, y, r, 0, tau);\n    }\n    return buffer && buffer.value();\n  }\n  renderHull(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {hull} = this;\n    let node = hull;\n    context.moveTo(node.x, node.y);\n    while (node = node.next, node !== hull) context.lineTo(node.x, node.y);\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  hullPolygon() {\n    const polygon = new Polygon;\n    this.renderHull(polygon);\n    return polygon.value();\n  }\n  renderTriangle(i, context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {points, triangles} = this;\n    const t0 = triangles[i *= 3] * 2;\n    const t1 = triangles[i + 1] * 2;\n    const t2 = triangles[i + 2] * 2;\n    context.moveTo(points[t0], points[t0 + 1]);\n    context.lineTo(points[t1], points[t1 + 1]);\n    context.lineTo(points[t2], points[t2 + 1]);\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  *trianglePolygons() {\n    const {triangles} = this;\n    for (let i = 0, n = triangles.length / 3; i < n; ++i) {\n      yield this.trianglePolygon(i);\n    }\n  }\n  trianglePolygon(i) {\n    const polygon = new Polygon;\n    this.renderTriangle(i, polygon);\n    return polygon.value();\n  }\n}\n\nDelaunay.from = function(points, fx = pointX, fy = pointY, that) {\n  return new Delaunay(\"length\" in points\n      ? flatArray(points, fx, fy, that)\n      : Float64Array.from(flatIterable(points, fx, fy, that)));\n};\n\nfunction flatArray(points, fx, fy, that) {\n  const n = points.length;\n  const array = new Float64Array(n * 2);\n  for (let i = 0; i < n; ++i) {\n    const p = points[i];\n    array[i * 2] = fx.call(that, p, i, points);\n    array[i * 2 + 1] = fy.call(that, p, i, points);\n  }\n  return array;\n}\n\nfunction* flatIterable(points, fx, fy, that) {\n  let i = 0;\n  for (const p of points) {\n    yield fx.call(that, p, i, points);\n    yield fy.call(that, p, i, points);\n    ++i;\n  }\n}\n","export {default as Delaunay} from \"./delaunay.js\";\nexport {default as Voronoi} from \"./voronoi.js\";\n","import { Vec2 } from \"./math/vec2\";\r\nimport { Delaunay, Voronoi } from \"d3-delaunay\";\r\n\r\nconst NUM_POINTS = 5000;\r\nconst WIDTH = 1280;\r\nconst HEIGHT = 720;\r\n\r\nconst NUM_PLATES = 10;\r\nconst PLATE_COLOR_MAP = [\r\n  \"black\",\r\n  \"blue\",\r\n  \"red\",\r\n  \"purple\",\r\n  \"green\",\r\n  \"teal\",\r\n  \"navy\",\r\n  \"yellow\",\r\n  \"magenta\",\r\n  \"white\",\r\n  \"pink\"\r\n];\r\n\r\ninterface IPoint {\r\n  loc: Vec2;\r\n  plateId: number;\r\n}\r\n\r\nlet canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\nlet ctx = canvas.getContext(\"2d\");\r\n\r\nfunction choose<T>(arr: Array<T>): number {\r\n  return Math.floor(Math.random() * arr.length);\r\n}\r\n\r\nfunction generatePoints(): IPoint[] {\r\n  let res = new Array<IPoint>(NUM_POINTS);\r\n  for (let i = 0; i < NUM_POINTS; i++) {\r\n    res[i] = {\r\n      loc: {\r\n        x: Math.random() * WIDTH,\r\n        y: Math.random() * HEIGHT\r\n      },\r\n      plateId: -1\r\n    };\r\n  }\r\n  return res;\r\n}\r\n\r\nfunction dist(p1: Vec2, p2: Vec2): number {\r\n  return Math.sqrt((p1.x - p2.x) ** 2 + (p1.y - p2.y) ** 2);\r\n}\r\n\r\nfunction floodFill(points: IPoint[]): IPoint[] {\r\n  let unmapped_points = [...points];\r\n  let res = [];\r\n  for (let i = 0; i < NUM_PLATES; i++) {\r\n    let p_i = choose(unmapped_points);\r\n    let p = unmapped_points.splice(p_i, 1)[0];\r\n    p.plateId = i;\r\n    res.push(p);\r\n  }\r\n  while (unmapped_points.length > 0) {\r\n    let p_i = choose(unmapped_points);\r\n    let p = unmapped_points.splice(p_i, 1)[0];\r\n    let closest_i = -1;\r\n    let closest_dist = 0;\r\n    let rl = res.length;\r\n    for (let i = 0; i < rl; i++) {\r\n      let curr = res[i];\r\n      let d = dist(curr.loc, p.loc);\r\n      if (closest_i == -1 || d < closest_dist) {\r\n        closest_dist = d;\r\n        closest_i = i;\r\n      }\r\n    }\r\n    p.plateId = res[closest_i].plateId;\r\n    res.push(p);\r\n  }\r\n\r\n  return res;\r\n}\r\n\r\nlet points = generatePoints();\r\nfloodFill(points);\r\nlet voronoi_points = points.map(val => [val.loc.x, val.loc.y]);\r\nlet delaunay = Delaunay.from(voronoi_points);\r\nlet voronoi = delaunay.voronoi([0, 0, WIDTH, HEIGHT]);\r\n\r\nfor (let i = 0; i < NUM_POINTS; i++) {\r\n  let cp = voronoi.cellPolygon(i);\r\n  points[i].loc.x = cp.reduce((agg, val) => agg + val[0], 0) / cp.length;\r\n  points[i].loc.y = cp.reduce((agg, val) => agg + val[1], 0) / cp.length;\r\n}\r\n\r\nvoronoi_points = points.map(val => [val.loc.x, val.loc.y]);\r\ndelaunay = Delaunay.from(voronoi_points);\r\nvoronoi = delaunay.voronoi([0, 0, WIDTH, HEIGHT]);\r\n\r\nctx.clearRect(0, 0, 800, 600);\r\n\r\nctx.strokeStyle = \"black\";\r\nfor (let plate_idx = 0; plate_idx < NUM_PLATES; plate_idx++) {\r\n  ctx.beginPath();\r\n  console.log(\"Rendering \" + ctx.fillStyle);\r\n  let pts = points\r\n    .map((val, idx) => ({ p: val, idx }))\r\n    .filter(val => val.p.plateId === plate_idx);\r\n  let pl = pts.length;\r\n  for (let i = 0; i < pl; i++) {\r\n    let p = pts[i];\r\n    voronoi.renderCell(p.idx, ctx);\r\n  }\r\n  ctx.fillStyle = PLATE_COLOR_MAP[plate_idx];\r\n  ctx.fill();\r\n  ctx.stroke();\r\n}\r\n"]}